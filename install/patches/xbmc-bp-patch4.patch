--- a/xbmc/input/MouseStat.h	2014-06-05 14:48:24.000000000 +0300
+++ b/xbmc/input/MouseStat.h	2014-06-06 14:48:24.000000000 +0300
@@ -74,16 +74,24 @@
   void SetActive(bool active = true);
   void SetState(MOUSE_STATE state) { m_pointerState = state; };
   void SetEnabled(bool enabled = true);
   MOUSE_STATE GetState() const { return m_pointerState; };
   uint32_t GetAction() const;
+  uint32_t GetRawAction() const;
 
   int GetHold(int ButtonID) const;
   inline int GetX(void) const { return m_mouseState.x; }
   inline int GetY(void) const { return m_mouseState.y; }
   inline int GetDX(void) const { return m_mouseState.dx; }
   inline int GetDY(void) const { return m_mouseState.dy; }
+  inline int GetRawX(void) const { return g_rawX; }
+  inline int GetRawY(void) const { return g_rawY; }
+  void SetRawX(int rawX) { g_rawX = rawX; }
+  void SetRawY(int rawY) { g_rawY = rawY; }
+ 
+  int g_rawX;           // raw value
+  int g_rawY;           // raw value
 
 private:
   /*! \brief Holds information regarding a particular mouse button state
 
    The CButtonState class is used to track where in a button event the mouse currently is.
@@ -121,11 +129,11 @@
      \param down true if the button is down
      \return action that should be performed
      */
     BUTTON_ACTION Update(unsigned int time, int x, int y, bool down);
   private:
-    static const unsigned int click_confines = 5;        ///< number of pixels that the pointer may move while the button is down to trigger a click
+    static const unsigned int click_confines = 10;        ///< number of pixels that the pointer may move while the button is down to trigger a click
     static const unsigned int short_click_time = 1000;   ///< time for mouse down/up to trigger a short click rather than a long click
     static const unsigned int double_click_time = 500;   ///< time for mouse down following a short click to trigger a double click
 
     bool InClickRange(int x, int y) const;
 
@@ -164,11 +172,12 @@
   unsigned int m_lastActiveTime;
 
   bool bClick[5];
   bool bDoubleClick[5];
   int  bHold[5];
-
+	
+  uint32_t m_RawAction;
   uint32_t m_Action;
 };
 
 extern CMouseStat g_Mouse;
 
