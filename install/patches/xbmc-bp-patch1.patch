--- C:/Users/Familie/Desktop/Original/gepatcht/LinuxInputDevices.cpp	Tue Jan 06 15:54:14 2015
+++ C:/Users/Familie/Desktop/Original/LinuxInputDevices.cpp	Tue Jan 06 16:02:09 2015
@@ -272,10 +272,29 @@
 	LI_CAPS_AXES = 4,
 } LinuxInputCapsType;
 
 static char remoteStatus = 0xFF; // paired, battery OK
 
+/* [AI]: calibration values */
+int calib_x_d;
+float calib_x_fact;
+int calib_y_d;
+float calib_y_fact;
+int swap_axes = 0;
+/* 
+ * Some touch controllers use the same input events as mouses and they need special handling
+ *     touch_mouse=1 the touchscreen will respond to touch screen and mouse events
+ *                   This will cause mouse clicks to not work
+ *     touch_mouse=0 the the touchscreen will only respond to touch screen events 
+ *                   This will cause normal mouse and touch screens which are not sending mouse events to work
+ * If you cannot click with a single tap with your touch screen you need to set touch_mouse=1
+ */
+uint32_t touch_mouse = 0;
+uint32_t click_confines = 35; 
+FILE *c_fp;
+/* [AI]: calibration values */
+
 CLinuxInputDevice::CLinuxInputDevice(const std::string fileName, int index)
 {
 	m_fd = -1;
 	m_vt_fd = -1;
 	m_hasLeds = false;
@@ -294,10 +313,55 @@
 	m_deviceCaps = 0;
 	m_deviceMinKeyCode = 0;
 	m_deviceMaxKeyCode = 0;
 	m_deviceMaxAxis = 0;
 	m_bUnplugged = false;
+	
+  /* [AI]: get calibration values from file */
+  /* set neutral values in case the read fails */
+  calib_x_d = g_graphicsContext.GetWidth();
+  calib_y_d = g_graphicsContext.GetHeight();
+  calib_x_fact = -1.0f;
+  calib_y_fact = -1.0f;
+
+  /* open the file */
+  char *pCalibFile = (char*)malloc(50);
+  sprintf(pCalibFile, "/touch/touchscreen_axes_calib");
+  c_fp = fopen(pCalibFile, "r");
+  free(pCalibFile);
+  if (c_fp == NULL)
+  {
+      printf("Error reading %s file\n", pCalibFile);
+  }
+  else
+  {
+    fscanf(c_fp, "calib_x_d=%d;calib_x_fact=%f;calib_y_d=%d;calib_y_fact=%f;swap_axes=%d;click_confines=%u;touch_mouse=%u\n",
+        &calib_x_d,
+        &calib_x_fact,
+        &calib_y_d,
+        &calib_y_fact,
+        &swap_axes,
+        &click_confines,
+        &touch_mouse
+    );
+    printf("File touchscreen_axes_calib successfully read:\n");
+
+    /* close the file */
+    fclose(c_fp);
+  }
+
+  printf("\n  calib_x_d=%d;\n  calib_x_fact=%f;\n  calib_y_d=%d;\n  calib_y_fact=%f;\n  swap_axes=%d;\n  &click_confines=%u\n  touch_mouse=%u\n",
+      calib_x_d,
+      calib_x_fact,
+      calib_y_d,
+      calib_y_fact,
+      swap_axes,
+      click_confines,
+      touch_mouse
+  );
+  /* [AI]: read calibration values from file */
+
 
 	Open();
 }
 
 CLinuxInputDevice::~CLinuxInputDevice()
@@ -452,10 +516,19 @@
 * Translates key and button events.
 */
 bool CLinuxInputDevice::KeyEvent(const struct input_event& levt, XBMC_Event& devt)
 {
 	int code = levt.code;
+  
+  /* [AI]: only for touchscreens, when PRESS action occurs */
+  if((levt.code == BTN_TOUCH || levt.code == BTN_TOOL_FINGER || levt.code == BTN_MOUSE)
+      && levt.value == 1 && (levt.type == EV_ABS || touch_mouse))
+  {
+    //CLog::Log(LOGWARNING, "[AI]: CLinuxInputDevice::KeyEvent: Hack coordinates \n");
+    m_mouseX = g_graphicsContext.GetWidth() + 2;
+    m_mouseY = g_graphicsContext.GetHeight() + 2;
+  }
 
 	/* map touchscreen and smartpad events to button mouse */
 	if (code == BTN_TOUCH || code == BTN_TOOL_FINGER)
 		code = BTN_MOUSE;
 
@@ -600,15 +673,33 @@
 bool CLinuxInputDevice::AbsEvent(const struct input_event& levt, XBMC_Event& devt)
 {
 	switch (levt.code)
 	{
 	case ABS_X:
-		m_mouseX = levt.value;
+		//m_mouseX = levt.value;
+    if(levt.value != g_Mouse.GetRawX())
+    {
+      g_Mouse.SetRawX(levt.value);
+      //printf("x: %d\n\r", g_Mouse.GetRawX());
+    }
+    if(swap_axes)
+      m_mouseY = (int)(((float)levt.value) * (calib_y_fact)) + calib_y_d;
+    else
+      m_mouseX = (int)(((float)levt.value) * (calib_x_fact)) + calib_x_d;
 		break;
 
 	case ABS_Y:
-		m_mouseY = levt.value;
+		//m_mouseY = levt.value;
+    if(levt.value != g_Mouse.GetRawY())
+    {
+      g_Mouse.SetRawY(levt.value);
+      //printf("y: %d\n\r", g_Mouse.GetRawY());
+    }
+    if(swap_axes)
+      m_mouseX = (int)(((float)levt.value) * (calib_x_fact)) + calib_x_d;
+    else
+      m_mouseY = (int)(((float)levt.value) * (calib_y_fact)) + calib_y_d;
 		break;
 
 	case ABS_MISC:
 		remoteStatus = levt.value & 0xFF;
 		break;
